package com.test.portlets.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.portlets.model.Employee;
import com.test.portlets.model.EmployeeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;Employee_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.portlets.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @see com.test.portlets.model.Employee
 * @see com.test.portlets.model.EmployeeModel
 * @generated
 */
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link com.test.portlets.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "Employee_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "employeeId", Types.BIGINT },
            { "employeeName", Types.VARCHAR },
            { "employeeGender", Types.VARCHAR },
            { "sbId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Employee_Employee (employeeId LONG not null primary key,employeeName VARCHAR(75) null,employeeGender VARCHAR(75) null,sbId LONG)";
    public static final String TABLE_SQL_DROP = "drop table Employee_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.employeeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Employee_Employee.employeeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.test.portlets.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.test.portlets.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.test.portlets.model.Employee"),
            true);
    public static long SBID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.test.portlets.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _employeeId;
    private String _employeeName;
    private String _employeeGender;
    private long _sbId;
    private long _originalSbId;
    private boolean _setOriginalSbId;
    private long _columnBitmask;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    public long getPrimaryKey() {
        return _employeeId;
    }

    public void setPrimaryKey(long primaryKey) {
        setEmployeeId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_employeeId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Employee.class;
    }

    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employeeId", getEmployeeId());
        attributes.put("employeeName", getEmployeeName());
        attributes.put("employeeGender", getEmployeeGender());
        attributes.put("sbId", getSbId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        String employeeName = (String) attributes.get("employeeName");

        if (employeeName != null) {
            setEmployeeName(employeeName);
        }

        String employeeGender = (String) attributes.get("employeeGender");

        if (employeeGender != null) {
            setEmployeeGender(employeeGender);
        }

        Long sbId = (Long) attributes.get("sbId");

        if (sbId != null) {
            setSbId(sbId);
        }
    }

    public long getEmployeeId() {
        return _employeeId;
    }

    public void setEmployeeId(long employeeId) {
        _columnBitmask = -1L;

        _employeeId = employeeId;
    }

    public String getEmployeeName() {
        if (_employeeName == null) {
            return StringPool.BLANK;
        } else {
            return _employeeName;
        }
    }

    public void setEmployeeName(String employeeName) {
        _employeeName = employeeName;
    }

    public String getEmployeeGender() {
        if (_employeeGender == null) {
            return StringPool.BLANK;
        } else {
            return _employeeGender;
        }
    }

    public void setEmployeeGender(String employeeGender) {
        _employeeGender = employeeGender;
    }

    public long getSbId() {
        return _sbId;
    }

    public void setSbId(long sbId) {
        _columnBitmask |= SBID_COLUMN_BITMASK;

        if (!_setOriginalSbId) {
            _setOriginalSbId = true;

            _originalSbId = _sbId;
        }

        _sbId = sbId;
    }

    public long getOriginalSbId() {
        return _originalSbId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    public Employee toUnescapedModel() {
        return (Employee) this;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmployeeId(getEmployeeId());
        employeeImpl.setEmployeeName(getEmployeeName());
        employeeImpl.setEmployeeGender(getEmployeeGender());
        employeeImpl.setSbId(getSbId());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    public int compareTo(Employee employee) {
        int value = 0;

        if (getEmployeeId() < employee.getEmployeeId()) {
            value = -1;
        } else if (getEmployeeId() > employee.getEmployeeId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeModelImpl employeeModelImpl = this;

        employeeModelImpl._originalSbId = employeeModelImpl._sbId;

        employeeModelImpl._setOriginalSbId = false;

        employeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.employeeId = getEmployeeId();

        employeeCacheModel.employeeName = getEmployeeName();

        String employeeName = employeeCacheModel.employeeName;

        if ((employeeName != null) && (employeeName.length() == 0)) {
            employeeCacheModel.employeeName = null;
        }

        employeeCacheModel.employeeGender = getEmployeeGender();

        String employeeGender = employeeCacheModel.employeeGender;

        if ((employeeGender != null) && (employeeGender.length() == 0)) {
            employeeCacheModel.employeeGender = null;
        }

        employeeCacheModel.sbId = getSbId();

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{employeeId=");
        sb.append(getEmployeeId());
        sb.append(", employeeName=");
        sb.append(getEmployeeName());
        sb.append(", employeeGender=");
        sb.append(getEmployeeGender());
        sb.append(", sbId=");
        sb.append(getSbId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.test.portlets.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeName</column-name><column-value><![CDATA[");
        sb.append(getEmployeeName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeGender</column-name><column-value><![CDATA[");
        sb.append(getEmployeeGender());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sbId</column-name><column-value><![CDATA[");
        sb.append(getSbId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
